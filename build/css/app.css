/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:rgba(0,0,0,0)}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type=button],[type=reset],[type=submit]{-webkit-appearance:button}button::-moz-focus-inner,[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}body{font-family:"Montserrat",sans-serif;font-optical-sizing:auto;font-style:normal;color:#000}html{font-size:62.5%;scroll-padding-top:0rem;scroll-behavior:smooth}*,*:before,*:after{box-sizing:border-box}body{font-family:"Montserrat",sans-serif;font-optical-sizing:auto;font-style:normal;color:#000;font-size:2rem}body.overflow-hidden{overflow:hidden}p{color:#000;line-height:1.5}.contenedor{width:95%;max-width:120rem;margin:0 auto}a{text-decoration:none}h1,h2,h3{margin:0 0 5rem 0;font-weight:900}h1{font-size:4rem}h2{font-size:4.6rem}h3{font-size:6rem;text-align:center}img{max-width:100%;width:100%;height:auto;display:block}button{border:none;font-family:inherit;color:inherit;cursor:pointer}body>section{padding:10rem 0}.header{background:#4cb8b3}@media(min-width: 768px){.header{position:fixed;left:0;top:0;width:100%;z-index:200;box-shadow:0 .2rem 2rem #333;animation:fadeIn ease-out .2s forwards}}.header .contenido-header{padding:2rem}@media(min-width: 768px){.header .contenido-header{display:flex;justify-content:space-between;align-items:center}}.header h1{color:#fff;text-align:center}@media(min-width: 768px){.header h1{margin:0;text-align:left}}.navegacion-principal{display:flex;flex-direction:column;align-items:center;gap:2rem}@media(min-width: 768px){.navegacion-principal{flex-direction:row}}.navegacion-principal a{color:#fff;font-size:2.4rem}.navegacion-principal a:hover{color:#fdda00}@media(min-width: 1024px){.activo{color:#fdda00 !important}}.video{position:relative;max-height:60rem;overflow:hidden}.video .overlay{position:absolute;background:linear-gradient(270deg, rgba(117, 47, 151, 0.3), color-mix(in srgb, #752F97 75%, #000000 25%));inset:0;height:auto;display:flex;align-items:center}.video video{display:block;width:auto}@media(min-width: 768px){.video video{width:100%}}.contenido-video{z-index:10;text-align:center}.contenido-video h2{color:#fff;font-size:3.5rem}@media(min-width: 768px){.contenido-video h2{font-size:7rem}}.contenido-video p{background:#f53756;display:inline-block;padding:1rem 2rem;color:#fff;font-weight:700;margin:0;font-size:2rem}@media(min-width: 768px){.contenido-video p{font-size:2.4rem}}.sobre-festival{width:95%;max-width:120rem;margin:0 auto}@media(min-width: 768px){.sobre-festival{grid-template-columns:repeat(2, 1fr);display:grid;gap:2.5rem;align-items:center}}.contenido-festival{margin-top:5rem}.contenido-festival h2{margin-bottom:2rem}.contenido-festival .fecha{color:#4cb8b3;font-weight:bold}.lineup{background:#f53756}.lineup h3,.lineup .dia{color:#fff;text-align:center}.lineup .dia{font-size:3rem;text-transform:uppercase}.escenarios-contenedor{display:grid;gap:2rem;width:95%;max-width:120rem;margin:0 auto}@media(min-width: 768px){.escenarios-contenedor{grid-template-columns:repeat(2, 1fr);display:grid;gap:5rem;align-items:center}}.escenario{padding-top:2rem}.escenario .nombre-escenario{font-size:3rem;font-weight:900;text-transform:uppercase;text-align:center}.calendario{margin:0;padding:0;list-style:none}.calendario li{padding:2.5rem;font-weight:bold}.calendario li span{font-weight:normal}.bg-amarillo{background:#fdda00}.bg-amarillo li:nth-child(odd){background:color-mix(in srgb, #fdda00 70%, #FFFFFF 30%)}.bg-verde{background:#4cb8b3}.bg-verde li:nth-child(odd){background:color-mix(in srgb, #4CB8B3 85%, #FFFFFF 15%)}.galeria-imagenes{width:95%;max-width:120rem;margin:0 auto;grid-template-columns:repeat(1, 1fr);display:grid;gap:2rem;align-items:center}@media(min-width: 480px){.galeria-imagenes{grid-template-columns:repeat(2, 1fr);display:grid;gap:2rem;align-items:center}}@media(min-width: 1024px){.galeria-imagenes{grid-template-columns:repeat(4, 1fr);display:grid;gap:2rem;align-items:center}}.galeria-imagenes img{height:20rem;object-fit:cover;cursor:pointer}.galeria-imagenes img:hover{transform:scale(1.03)}.modal{position:fixed;inset:0;z-index:10;background:rgba(0,0,0,.5);display:grid;place-items:center;animation:fadeIn ease-out .3s forwards}.modal-fade-out{animation:fadeOut ease-in .3s forwards}.modal .close-button{font-size:2rem;font-weight:bold;background:#fff;padding:1rem 1.5rem;border-radius:50%}.modal img{max-width:100rem}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}.contenedor-boletos{background:#4cb8b3}.contenedor-boletos h3{color:#fff}.contenedor-boletos .boletos{width:95%;max-width:120rem;margin:0 auto}@media(min-width: 768px){.contenedor-boletos .boletos{grid-template-columns:repeat(2, 1fr);display:grid;gap:5rem;align-items:center}}.pase{transition:transform .3s ease-in-out}.pase:hover{transform:scale(1.05)}.pase-nombre{font-size:3.6rem;text-align:center;font-weight:900;color:#fff}.pase-header,.pase-footer{padding:.5rem}.pase-header p,.pase-footer p{text-align:center;color:#fff;margin:0}.pase-header{background:#f53756}.pase-header p{text-transform:uppercase;font-size:2.2rem;padding-block:1rem}.pase-body{background:#fff}.pase-body ul{margin:0;padding:0;list-style:none}.pase-body ul li{padding:2rem;border-bottom:1px solid #e1e1e1}.pase-footer{background:#fff;padding:3rem}.pase-footer p{font-size:2.8rem;font-weight:900;background:#752f97;border-radius:1rem;padding-block:1rem;cursor:pointer}.pase-footer p:hover{background:color-mix(in srgb, #752F97 75%, #000000 25%)}.footer{background:#f53756;padding-block:2rem}.footer p{margin:0;color:#fff;text-align:center}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
